#!/bin/bash
#
# Git pre-commit hook for security-compliance-cli
# This runs automatically before each commit to catch issues early
#

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}🔍 Running pre-commit checks...${NC}"

# Check if we're in the right directory
if [ ! -f "Cargo.toml" ]; then
    echo -e "${RED}❌ Not in a Rust project directory${NC}"
    exit 1
fi

# Function to run a check and handle failure
run_check() {
    local check_name="$1"
    local command="$2"
    
    echo -e "${YELLOW}📝 $check_name...${NC}"
    if eval "$command"; then
        echo -e "${GREEN}✅ $check_name OK${NC}"
        return 0
    else
        echo -e "${RED}❌ $check_name failed${NC}"
        return 1
    fi
}

# Run formatting check
if ! run_check "Checking code formatting" "cargo fmt --all -- --check"; then
    echo -e "${YELLOW}💡 Run 'cargo fmt --all' or 'make fmt' to fix formatting${NC}"
    exit 1
fi

# Run clippy linting
if ! run_check "Running Clippy linter" "cargo clippy --all-targets --all-features -- -D warnings"; then
    echo -e "${YELLOW}💡 Fix the linting issues above${NC}"
    exit 1
fi

# Run tests
if ! run_check "Running tests" "cargo test"; then
    echo -e "${YELLOW}💡 Fix the failing tests above${NC}"
    exit 1
fi

# Check that it builds
if ! run_check "Checking build" "cargo check"; then
    echo -e "${YELLOW}💡 Fix the build errors above${NC}"
    exit 1
fi

echo -e "${GREEN}🎉 All pre-commit checks passed! Proceeding with commit...${NC}"
